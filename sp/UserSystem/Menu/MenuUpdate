CREATE OR REPLACE FUNCTION MenuUpdate(
MenuId INTEGER,
MenuName VARCHAR,
MenuDesc VARCHAR,
MenuUrl VARCHAR,
MenuPid integer,
MenuIcon VARCHAR,
RequestedOperation VARCHAR,
LogDesc VARCHAR,
LogPreviousState VARCHAR, 
by_user INTEGER,
ip VARCHAR,
OUT result INTEGER,
OUT rescode INTEGER
) RETURNS RECORD AS $$
DECLARE 
    temp INTEGER;
    varrec RECORD;
BEGIN 
temp := 0;

IF NOT EXISTS ( SELECT id FROM "Users_menu" WHERE id=MenuId) THEN
	result := -1;
  	rescode := 106;
	RETURN;
END IF;

SELECT * INTO varrec FROM CheckUserForPermission(by_user,RequestedOperation,'menu','Users');
IF varrec.result <> 1 THEN
	rescode :=  varrec.rescode;
	result := -2;
	RETURN;
END IF;

UPDATE "Users_menu"
SET 	"MenuName"=MenuName, 
	"MenuDesc"=MenuDesc, 
	"MenuUrl"=MenuUrl, 
	"MenuPid"=MenuPid, 
	"State_id"=varrec.varsci,  
	"MenuIcon"=MenuIcon
WHERE  id=MenuId;

GET DIAGNOSTICS temp := ROW_COUNT;
IF temp <> 1 THEN 
	rescode := 107;
	result := -1;
        RETURN;
END IF;


INSERT INTO "Users_userlogs"("LogsUser_id", "ContentType_id", "LogsObject", "LogsPermission_id", "LogsIP", "LogsTimeStamp", "LogsDescription", "LogsPreviousState")
VALUES(by_user,varrec.var_ctid,MenuId,varrec.varpci,ip,now(),LogDesc,LogPreviousState);
GET DIAGNOSTICS temp := ROW_COUNT;
IF temp <> 1 THEN 
	rescode := 999;
	result := -1;
        RETURN;
ELSE
	rescode := 110;
	result := 1;
RETURN;
END IF;
END;
$$ LANGUAGE plpgsql;


