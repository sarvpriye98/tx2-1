CREATE OR REPLACE FUNCTION FunctionalAreaTypeUpdate(
_Id  integer,
_FunctionalAreaTypeName VARCHAR,
prev varchar,
RequestedOperation VARCHAR,
by_user INTEGER,
ip VARCHAR,
OUT result INTEGER,
OUT rescode INTEGER
) RETURNS RECORD AS $$
DECLARE 
    temp INTEGER;
    varrec RECORD;
BEGIN

temp := 0;

IF NOT EXISTS ( SELECT id FROM "UserProfile_functionalareatype" WHERE id=_Id) THEN
	result := -4;
  	rescode := 161;
	RETURN;
END IF;


IF EXISTS ( SELECT id FROM "UserProfile_functionalareatype" WHERE "FunctionalAreaTypeName"=_FunctionalAreaTypeName) THEN
	result := -3;
  	rescode := 200;
	RETURN;
END IF;

SELECT * INTO varrec FROM CheckUserForPermission(by_user,RequestedOperation,'functionalareatype','UserProfile');
IF varrec.result <> 1 THEN
	rescode :=  varrec.rescode;
	result := -2;
	
	RETURN;
END IF;

Update "UserProfile_functionalareatype" 
set "FunctionalAreaTypeName"=_FunctionalAreaTypeName where id=_Id ;

GET DIAGNOSTICS temp := ROW_COUNT;

If temp <> 1 THEN 
		rescode := 162;
		result := -1;
END IF;



SELECT id INTO rescode FROM "UserProfile_functionalareatype" WHERE "FunctionalAreaTypeName"=_FunctionalAreaTypeName;


INSERT INTO "UserProfile_userprofilelogs"("LogsUser_id", "ContentType_id", "LogsObject", "LogsPermission_id", "LogsIP", "LogsTimeStamp", "LogsDescription","LogsPreviousState")
VALUES (by_user,varrec.var_ctid,rescode,varrec.varpci,ip,now(),'UPDATE',prev);
GET DIAGNOSTICS temp := ROW_COUNT;
IF temp <> 1 THEN 
	rescode := 999;
	result := -1;
        RETURN;
ELSE
	result := 1;
	
RETURN;
END IF;
END;
$$ LANGUAGE plpgsql;


